// <auto-generated />
using System;
using Logistic_Order.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistic_Order.Migrations
{
    [DbContext(typeof(LoginDbContext))]
    [Migration("20250411062133_Finals")]
    partial class Finals
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistic_Order.Model.Entities.Buyer", b =>
                {
                    b.Property<int>("Buyer_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Buyer_Id"));

                    b.Property<string>("Buyer_Company_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Company_City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Company_Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Company_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Company_State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Company_ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_First_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Last_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Buyer_Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Buyer_Id");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Commodity", b =>
                {
                    b.Property<int>("Commodity_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Commodity_Id"));

                    b.Property<string>("Commodity_Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Expiry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Commodity_Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Commodity_Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commodity_Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("integer");

                    b.HasKey("Commodity_Id");

                    b.HasIndex("Supplier_Id");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Commodity_Category", b =>
                {
                    b.Property<int>("CommodityId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("CommodityId");

                    b.ToTable("Commodity_Categories");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Delivery", b =>
                {
                    b.Property<int>("Delivery_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Delivery_Id"));

                    b.Property<string>("Delivery_Carrier_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Delivery_Confirmation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Delivery_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Delivery_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Delivery_Tracking_History")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Shipping_Id")
                        .HasColumnType("integer");

                    b.HasKey("Delivery_Id");

                    b.HasIndex("Shipping_Id")
                        .IsUnique();

                    b.ToTable("Delivered");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Feedback", b =>
                {
                    b.Property<int>("Feedback_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Feedback_Id"));

                    b.Property<int>("Buyer_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Feedback_Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Feedback_Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Feedback_Id");

                    b.HasIndex("Buyer_Id")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Invoice", b =>
                {
                    b.Property<int>("Invoice_No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Invoice_No"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Invoice_Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Invoice_Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Invoice_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order_No")
                        .HasColumnType("integer");

                    b.Property<int>("Payment_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Shipping_Id")
                        .HasColumnType("integer");

                    b.HasKey("Invoice_No");

                    b.HasIndex("Order_No");

                    b.HasIndex("Shipping_Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login", b =>
                {
                    b.Property<int>("Login_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Login_Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Login_Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login_Buyer", b =>
                {
                    b.Property<int>("Login_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Buyer_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Login_Buyer_Id")
                        .HasColumnType("integer");

                    b.HasKey("Login_Id", "Buyer_Id");

                    b.HasIndex("Buyer_Id");

                    b.ToTable("LoginBuyers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login_Role", b =>
                {
                    b.Property<int>("Login_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Role_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Login_Role_Id")
                        .HasColumnType("integer");

                    b.HasKey("Login_Id", "Role_Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("LoginRoles");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login_Supplier", b =>
                {
                    b.Property<int>("Login_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Login_Supplier_Id")
                        .HasColumnType("integer");

                    b.HasKey("Login_Id", "Supplier_Id");

                    b.HasIndex("Supplier_Id");

                    b.ToTable("LoginSuppliers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Order", b =>
                {
                    b.Property<int>("Order_No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Order_No"));

                    b.Property<int>("Buyer_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Order_Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Order_Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Order_No");

                    b.HasIndex("Buyer_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.OrderCommodities", b =>
                {
                    b.Property<int>("Order_No")
                        .HasColumnType("integer");

                    b.Property<int>("CommodityId")
                        .HasColumnType("integer");

                    b.HasKey("Order_No", "CommodityId");

                    b.HasIndex("CommodityId");

                    b.ToTable("OrderCommodities");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Order_Supplier", b =>
                {
                    b.Property<int>("Order_No")
                        .HasColumnType("integer");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Order_No", "Supplier_Id");

                    b.HasIndex("Supplier_Id");

                    b.ToTable("Order_Suppliers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Payment", b =>
                {
                    b.Property<int>("Payment_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Buyer_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Cost_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Payment_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payment_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payment_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payment_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Payment_Id");

                    b.HasIndex("Buyer_Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.PermissionRole", b =>
                {
                    b.Property<int>("Permission_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Role_Id")
                        .HasColumnType("integer");

                    b.HasKey("Permission_Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("PermissionRoles");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Permissions", b =>
                {
                    b.Property<int>("Permission_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Permission_Id"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Permission_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Permission_Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Role", b =>
                {
                    b.Property<int>("Role_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Role_Id"));

                    b.Property<string>("Role_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Role_Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Shipping", b =>
                {
                    b.Property<int>("Shipping_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Buyer_Id")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingType_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Shipping_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shipping_Carrier_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shipping_City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shipping_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Shipping_expected_Delivery")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Warehouse_Id")
                        .HasColumnType("integer");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.HasKey("Shipping_Id");

                    b.HasIndex("Buyer_Id");

                    b.HasIndex("Supplier_Id");

                    b.HasIndex("Warehouse_Id");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.ShippingType", b =>
                {
                    b.Property<int>("Shipping_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Shipping_Id"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Shipping_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Shipping_Id");

                    b.ToTable("ShippingTypes");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Shipping_Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Route_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Route_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Route_Tracking_History")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shipping_Routes");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Stock", b =>
                {
                    b.Property<int>("Warehouse_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Commodity_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Warehouse_Id");

                    b.HasIndex("Commodity_Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Warehouse_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Supplier_Id");

                    b.HasIndex("Warehouse_Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Supplier", b =>
                {
                    b.Property<int>("Supplier_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Supplier_Id"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier_Company_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Company_City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Company_Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Company_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Company_State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Company_Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Company_ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Supplier_Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Warehouse_Id")
                        .HasColumnType("integer");

                    b.HasKey("Supplier_Id");

                    b.HasIndex("Warehouse_Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.TotalCost", b =>
                {
                    b.Property<int>("Cost_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Order_No")
                        .HasColumnType("integer");

                    b.Property<int>("Shipping_Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total_Amount")
                        .HasColumnType("numeric");

                    b.HasKey("Cost_Id");

                    b.HasIndex("Order_No")
                        .IsUnique();

                    b.HasIndex("Shipping_Id")
                        .IsUnique();

                    b.ToTable("TotalCosts");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Tracking", b =>
                {
                    b.Property<int>("Tracking_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tracking_Id"));

                    b.Property<string>("Current_location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Route_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Shipping_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TrackingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tracking_History")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tracking_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Tracking_Id");

                    b.HasIndex("Route_Id");

                    b.HasIndex("Shipping_Id");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Warehouse", b =>
                {
                    b.Property<int>("Warehouse_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Warehouse_Id"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Warehouse_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Warehouse_ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Warehouse_Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Commodity", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Supplier", "Supplier")
                        .WithMany("Commodity")
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Commodity_Category", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Commodity", "Commodity")
                        .WithOne("Commodity_Category")
                        .HasForeignKey("Logistic_Order.Model.Entities.Commodity_Category", "CommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Delivery", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Shipping", "Shipping")
                        .WithOne("Delivery")
                        .HasForeignKey("Logistic_Order.Model.Entities.Delivery", "Shipping_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Feedback", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Buyer", "Buyers")
                        .WithOne("Feedback")
                        .HasForeignKey("Logistic_Order.Model.Entities.Feedback", "Buyer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Invoice", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("Order_No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Shipping", "Shipping")
                        .WithMany("Invoices")
                        .HasForeignKey("Shipping_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login_Buyer", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("Buyer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Login", "Login")
                        .WithMany("LoginBuyers")
                        .HasForeignKey("Login_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login_Role", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Login", "Login")
                        .WithMany("LoginRoles")
                        .HasForeignKey("Login_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login_Supplier", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Login", "Login")
                        .WithMany("LoginSuppliers")
                        .HasForeignKey("Login_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Order", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Buyer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("Buyer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.OrderCommodities", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Commodity", "Commodity")
                        .WithMany("OrderCommodities")
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Order", "Order")
                        .WithMany("OrderCommodities")
                        .HasForeignKey("Order_No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Order_Supplier", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Order", "Order")
                        .WithMany("OrderSuppliers")
                        .HasForeignKey("Order_No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Supplier", "Supplier")
                        .WithMany("Order_Suppliers")
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Payment", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Buyer", "Buyer")
                        .WithMany("Payments")
                        .HasForeignKey("Buyer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Invoice", "Invoice")
                        .WithOne("Payment")
                        .HasForeignKey("Logistic_Order.Model.Entities.Payment", "Payment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.PermissionRole", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Permissions", "Permissions")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("Permission_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Role", "Roles")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Shipping", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Buyer", "Buyer")
                        .WithMany("Shippings")
                        .HasForeignKey("Buyer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.ShippingType", "ShippingTypes")
                        .WithMany("Shippings")
                        .HasForeignKey("Shipping_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Supplier", "Supplier")
                        .WithMany("Shippings")
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Warehouse", "WareHouses")
                        .WithMany("Shippings")
                        .HasForeignKey("Warehouse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("ShippingTypes");

                    b.Navigation("Supplier");

                    b.Navigation("WareHouses");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Stock", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Commodity", "Commodity")
                        .WithMany("Stocks")
                        .HasForeignKey("Commodity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("Warehouse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Store", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Supplier", "Supplier")
                        .WithMany("Stores")
                        .HasForeignKey("Supplier_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Warehouse", "Warehouse")
                        .WithMany("Stores")
                        .HasForeignKey("Warehouse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Supplier", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Warehouse", "Warehouse")
                        .WithMany("Suppliers")
                        .HasForeignKey("Warehouse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.TotalCost", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Payment", "Payments")
                        .WithOne("TotalCost")
                        .HasForeignKey("Logistic_Order.Model.Entities.TotalCost", "Cost_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Order", "Order")
                        .WithOne("TotalCosts")
                        .HasForeignKey("Logistic_Order.Model.Entities.TotalCost", "Order_No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Shipping", "shipping")
                        .WithOne("TotalCosts")
                        .HasForeignKey("Logistic_Order.Model.Entities.TotalCost", "Shipping_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Payments");

                    b.Navigation("shipping");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Tracking", b =>
                {
                    b.HasOne("Logistic_Order.Model.Entities.Shipping_Route", "Shipping_Routes")
                        .WithMany("Trackings")
                        .HasForeignKey("Route_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistic_Order.Model.Entities.Shipping", "Shipping")
                        .WithMany("Trackings")
                        .HasForeignKey("Shipping_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipping");

                    b.Navigation("Shipping_Routes");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Buyer", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Commodity", b =>
                {
                    b.Navigation("Commodity_Category")
                        .IsRequired();

                    b.Navigation("OrderCommodities");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Invoice", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Login", b =>
                {
                    b.Navigation("LoginBuyers");

                    b.Navigation("LoginRoles");

                    b.Navigation("LoginSuppliers");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderCommodities");

                    b.Navigation("OrderSuppliers");

                    b.Navigation("TotalCosts")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Payment", b =>
                {
                    b.Navigation("TotalCost")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Permissions", b =>
                {
                    b.Navigation("PermissionRoles");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Role", b =>
                {
                    b.Navigation("PermissionRoles");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Shipping", b =>
                {
                    b.Navigation("Delivery")
                        .IsRequired();

                    b.Navigation("Invoices");

                    b.Navigation("TotalCosts")
                        .IsRequired();

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.ShippingType", b =>
                {
                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Shipping_Route", b =>
                {
                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Supplier", b =>
                {
                    b.Navigation("Commodity");

                    b.Navigation("Order_Suppliers");

                    b.Navigation("Shippings");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Logistic_Order.Model.Entities.Warehouse", b =>
                {
                    b.Navigation("Shippings");

                    b.Navigation("Stocks");

                    b.Navigation("Stores");

                    b.Navigation("Suppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
